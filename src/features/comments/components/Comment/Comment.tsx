import { useCallback, useEffect, useState } from 'react'import { get } from '../../../../api/api'import { Link, useParams } from 'react-router-dom'import { PageWrapperHeight } from '../../../../components'// import CommentBody from './CommentBody'import CommentHeader from './CommentHeader'import CommentHeaderSkeleton from '../CommentSkeleton/CommentHeaderSkeleton'import CommentBodySkeleton from '../CommentSkeleton/CommentBodySkeleton'import { type ArticleFormat, type CommentType } from '../../../../api/types'import classes from './Comment.module.css'import CommentBody from './CommentBody'const Comment = () => {  const { id } = useParams()  const [articleData, setArticleData] = useState<ArticleFormat | null>(null)  const [comments, setComments] = useState<CommentType[]>([])  const [loading, setLoading] = useState<boolean>()  const getComments = useCallback(async (commentIds: number[]) => {    const promises: Array<Promise<any>> = commentIds.map(async commentId => { return await get(`https://hacker-news.firebaseio.com/v0/item/${commentId}.json?print=pretty`) })    const response = await Promise.all(promises)    setComments(response)  }, [])  const getCommentData = useCallback(() => {    setLoading(true)    get(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`)      .then(async response => {        setArticleData(response)        if (response?.kids) {          await getComments(response.kids)        }      })      .catch(error => {        console.error('Ошибка при получении данных:', error)      })      .finally(() => { setLoading(false) })  }, [id, getComments])  useEffect(() => {    console.log('effect')    getCommentData()  }, [getCommentData])  return (      <PageWrapperHeight>          <div className={classes.commentsContainer}>              <div className={classes.backBtn}>                  <Link to='/'>                      <button>Назад</button>                  </Link>              </div>              {loading === true                ? (                    <>                        <CommentHeaderSkeleton />                         <CommentBodySkeleton />                    </>                  )                : (                    <>                        {articleData !== null                          ? (                              <CommentHeader                                  title={articleData.title}                                  name={articleData.by}                                  date={articleData.time}                                  url={articleData.url}                          />                            )                          : (                              <p>Данные отсутствуют</p>                            )}                        <CommentBody comments={comments}/>                    </>                  )}          </div>      </PageWrapperHeight>  )}export default Comment