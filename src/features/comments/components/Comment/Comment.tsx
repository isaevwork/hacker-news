import { useEffect, useState } from 'react'import { Link, useParams } from 'react-router-dom'import CommentBody from './CommentBody'import { PageWrapperHeight } from '../../../../components'import CommentHeader from './CommentHeader'import { get } from '../../../../api/api'import { type ArticleFormat, type CommentType } from '../../../../api/types'import CommentHeaderSkeleton from '../CommentSkeleton/CommentHeaderSkeleton'import CommentBodySkeleton from '../CommentSkeleton/CommentBodySkeleton'import classes from './Comment.module.css'const Comment = () => {  const { id } = useParams()  const [articleData, setArticleData] = useState<ArticleFormat | null>(null)  const [comments, setComments] = useState<CommentType[]>([])  const [loading, setLoading] = useState<boolean>()  function getCommentData (articleId: string | undefined) {    if (!articleId) {      return    }    setLoading(true)    get(`https://hacker-news.firebaseio.com/v0/item/${articleId}.json?print=pretty`)      .then(async response => {        setArticleData(response)        if (response?.kids) {          const commentsData = await getComments(response.kids)          setComments(commentsData)        }      })      .catch(error => {        console.error('Ошибка при получении данных:', error)      })      .finally(() => { setLoading(false) })  }  async function getComments (commentIds: number[]) {    return await Promise      .all(commentIds.map(async commentId => {        const comment = await get(`https://hacker-news.firebaseio.com/v0/item/${commentId}.json?print=pretty`)        if        (comment?.kids) {          comment.kids = await getComments(comment.kids)        }        return comment      }))  }  console.log(comments)  useEffect(() => {    getCommentData(id)  }, [id])  return (      <PageWrapperHeight>          <div className={classes.commentsContainer}>              <div className={classes.backBtn}>                  <Link to='/'>                      <button>Назад</button>                  </Link>              </div>              {loading === true                ? (                    <>                        <CommentHeaderSkeleton />                         <CommentBodySkeleton />                    </>                  )                : (                    <>                        {articleData !== null                          ? (                              <CommentHeader                                  title={articleData.title}                                  name={articleData.by}                                  date={articleData.time}                                  url={articleData.url}                          />                            )                          : (                              <p>Данные отсутствуют</p>                            )}                        <CommentBody comments={comments}/>                    </>                  )}          </div>      </PageWrapperHeight>  )}export default Comment